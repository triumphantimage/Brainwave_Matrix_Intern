Cloud Computing Internship Project:
E-commerce site or any static website with cloud storage
This project involves creating a simple HTML/CSS website and deploying it
to Google Cloud.
OR
Chat Application with Firebase
Create a real-time chat application using Firebase. This project
involves using Firebase services like Firestore, Authentication, and Hosting.




Option 1: Deploying an E-commerce Site or Static Website to Google Cloud

Step 1: Set Up Google Cloud Account
1. Create a Google Cloud Account
   - Go to [Google Cloud Console](https://console.cloud.google.com/).
   - Sign up or log in using your Google account.
   - Set up your billing information (Google Cloud offers a free tier with some credit for new users).

2. Install Google Cloud SDK (Optional)
   - To use command-line tools for Google Cloud, download and install the [Google Cloud SDK](https://cloud.google.com/sdk/docs/install).
   - After installation, initialize the SDK by running:
     ```bash
     gcloud init
     ```

Step 2: Create a Simple Static Website
1. Create an HTML/CSS Site
   - Create a simple HTML/CSS website on your local machine. Here’s an example `index.html` file:
     ```html
     <!DOCTYPE html>
     <html lang="en">
     <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>My E-commerce Site</title>
       <link rel="stylesheet" href="styles.css">
     </head>
     <body>
       <h1>Welcome to My E-commerce Site</h1>
       <p>This is a simple static website hosted on Google Cloud.</p>
     </body>
     </html>
     ```
   - In the same directory, create a `styles.css` file to style your site.

2. Organize Your Website Files
   - Place your `index.html` and `styles.css` files into a folder (e.g., `my-website`).
   
Step 3: Upload Your Site to Google Cloud Storage
1. Create a Storage Bucket
   - In the Google Cloud Console, search for Cloud Storage.
   - Click Create Bucket and provide a unique name for your bucket (e.g., `my-ecommerce-bucket`).
   - Select the Region where you want your site to be hosted.
   - For Access Control, choose Uniform.

2. Upload Website Files
   - Navigate to the Objects tab in the bucket.
   - Click Upload Files and select your `index.html` and `styles.css`.

3. Make Files Public
   - Once uploaded, click on each file (e.g., `index.html`) and choose Edit Permissions.
   - Add allUsers under permissions and give them Reader access to make the website publicly accessible.

Step 4: Configure the Bucket for Website Hosting
1. Enable Static Website Hosting
   - Go to Bucket Details > Edit Website Configuration.
   - Set the Main Page as `index.html` and leave 404 as blank (or set a custom error page).
   
2. Access Your Website
   - After configuring the bucket, you’ll get a public URL (e.g., `http://storage.googleapis.com/my-ecommerce-bucket/index.html`).
   - Visit this URL in your browser to view your website.

Step 5: Monitor and Manage Your Website
1. Monitor Usage
   - In Google Cloud Storage, you can monitor file usage and traffic by viewing the Usage tab of your storage bucket.

2. Make Future Updates
   - Whenever you need to update the website, simply replace the files in your bucket with updated ones.

Step 6: Submit Your Report
1. Write Your Report
   - Introduction: Explain the purpose of hosting a static site on Google Cloud.
   - Steps Taken: Detail each step from creating the site to hosting it in the cloud.
   - Challenges: Note any difficulties and how they were solved.
   - Conclusion: Summarize the project and the final outcome.
   


Option 2: Create a Real-Time Chat Application Using Firebase

Step 1: Set Up Firebase
1. Create a Firebase Account
   - Go to [Firebase Console](https://console.firebase.google.com/).
   - Log in with your Google account and click Add Project.
   - Name your project (e.g., `chat-app-project`) and click Continue.

2. Enable Firebase Services
   - In your project, enable the following Firebase services:
     - Authentication (for user sign-in)
     - Firestore Database (for real-time chat storage)
     - Hosting (for deploying your chat app)

Step 2: Build the Chat Application (HTML, CSS, JavaScript)
1. Create the Project Directory
   - On your local machine, create a project directory called `firebase-chat-app`.
   - Inside this directory, create an `index.html` file and add the following code:
   
   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Chat App</title>
   </head>
   <body>
     <h1>Firebase Chat App</h1>
     <div id="chat-box"></div>
     <input type="text" id="message-input" placeholder="Type a message">
     <button id="send-btn">Send</button>
     
     <script src="https://www.gstatic.com/firebasejs/9.x.x/firebase-app.js"></script>
     <script src="https://www.gstatic.com/firebasejs/9.x.x/firebase-firestore.js"></script>
     <script src="https://www.gstatic.com/firebasejs/9.x.x/firebase-auth.js"></script>
     <script src="app.js"></script>
   </body>
   </html>
   ```

2. Set Up Firebase in Your JavaScript File (`app.js`)
   - Inside the same folder, create a file called `app.js` and initialize Firebase:

   ```javascript
   // Your Firebase configuration
   const firebaseConfig = {
     apiKey: "YOUR_API_KEY",
     authDomain: "YOUR_PROJECT_ID.firebaseapp.com",
     projectId: "YOUR_PROJECT_ID",
     storageBucket: "YOUR_PROJECT_ID.appspot.com",
     messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
     appId: "YOUR_APP_ID"
   };

   // Initialize Firebase
   firebase.initializeApp(firebaseConfig);

   // Firestore reference
   const db = firebase.firestore();

   // Chat message sending
   const sendMessage = () => {
     const message = document.getElementById('message-input').value;
     db.collection('messages').add({
       text: message,
       timestamp: firebase.firestore.FieldValue.serverTimestamp()
     });
   };

   document.getElementById('send-btn').addEventListener('click', sendMessage);

   // Real-time listener
   db.collection('messages').orderBy('timestamp')
     .onSnapshot(snapshot => {
       const chatBox = document.getElementById('chat-box');
       chatBox.innerHTML = '';
       snapshot.forEach(doc => {
         const message = doc.data().text;
         chatBox.innerHTML += `<p>${message}</p>`;
       });
     });
   ```

Step 3: Add Firebase Authentication
1. Enable Google Sign-In Authentication
   - In the Firebase Console, go to Authentication > Sign-in method and enable Google.
   
2. Add Google Sign-In Code
   - Add the following code to `app.js` to enable user sign-in:
   
   ```javascript
   const provider = new firebase.auth.GoogleAuthProvider();

   firebase.auth().signInWithPopup(provider).then(result => {
     console.log(`User signed in: ${result.user.displayName}`);
   }).catch(error => {
     console.error(`Error signing in: ${error.message}`);
   });
   ```

Step 4: Deploy the App to Firebase Hosting
1. Install Firebase CLI
   - On your machine, install the Firebase CLI:
     ```bash
     npm install -g firebase-tools
     ```

2. Login to Firebase
   - Run the following command:
     ```bash
     firebase login
     ```

3. Initialize Firebase Hosting
   - In the project directory, initialize Firebase hosting:
     ```bash
     firebase init
     ```

4. Deploy Your App
   - After initializing, deploy the chat application:
     ```bash
     firebase deploy
     ```

   - Once the deployment is done, Firebase will provide a URL where your app is live.

Step 5: Submit Your Report
1. Write Your Report
   - Introduction: Describe the goal of creating a chat app with Firebase.
   - Steps Taken: Explain the steps from setting up Firebase to deploying the chat app.
   - Challenges: Mention any obstacles and how you overcame them.
   - Conclusion: Summarize the project and results.

---

Final Tips for Both Projects
- Use the official documentation for [Google Cloud](https://cloud.google.com/docs) and [Firebase](https://firebase.google.com/docs) for reference.
- Test your applications multiple times to ensure functionality before submission.
  
